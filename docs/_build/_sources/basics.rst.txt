The Basics
===============

PhysicsManagers:
=================

`PhysicsManagers` represent a universe in which physics works a specific way based on its configuration. It is possible to have multiple universes that are used at the same time for different things. These "universes" operate on their own "ticks". Each manager has a list of all the objects within its universe. When a tick passes for a universe, a tick passes for each object within it, and the forces for each object act on them.

Ticks:
===============

"Ticks" are the amount of time that passes. The `tick_length` of a manager is configurable on the fly and is specific to each manager. It is common to change the tick length for an individual tick, sometimes to have a specific force to act over a smaller or instantaneous time interval (allowing for things like collisions). This will change the amount of time that passes for this specific tick. A tick passes when `PhysicsManager.tick(tick_length)` is called (the `tick_length` will default to the `PhysicsManager`'s configured tick length). It is also common to make a tick pass for a specific object (`PhysicsObject.tick(tick_length)`; `tick_length` must be given). Time will then only pass for that object. Ticks do not go by automatically, but instead pass in a game loop by calling `PhysicsManager.tick()` every frame, or whenever is necessary. In other words, time only passes when `tick()` is called, and time is frozen at all other times. This provides the advantage of not relying on the CPU clock for passing time when implementing physics into your game.

PhysicsObjects
===============

`PhysicsObject`s are objects within a `PhysicsManager` universe. Although they *can* be within multiple universes, it is *not* recommended, because each universe will affect the object as ticks pass for that universe, making it difficult to understand what is happening. Certain game scenarios may warrant such an action, however. As mentioned above, ticks can pass individually for a single object, and forces will only act on said object during the time interval. Each object contains a list of all the forces acting on it. An object's velocity and position can be manipulated directly without the use of forces, and can be useful in some situations. Each `PhysicsObject` has its own `mass`.

Force
===============

`Force`s are exactly what they sound like: forces that act on a `PhysicsObject`. Just like `PhysicsObjects` and `PhysicsManagers`, forces *can* be used by multiple `PhysicsObjects`, but it is *not* recommended. Most forces will not cause trouble because they are not usually dependent on the object they are applied to. Gravitational forces that are created by supplying the gravitational acceleration, `g`, however, are a problem. When a force with the gravitational acceleration argument is created, the force is calculated on `__init__` **using the parent object's mass**. If two objects have different masses, a single gravitational force created with a gravitational acceleration cannot be used on both. It is possible to still have a gravitational force that can be used on two `PhysicsObject`s that would not programmatically break (however it would still not make sense if their masses are not the same, because they would then not accelerate downwards at the same rate). Additionally, new types of forces may be added in the future that could not be used on multiple objects. `Force`s act on `PhysicsObject`s based on how long a tick is.
